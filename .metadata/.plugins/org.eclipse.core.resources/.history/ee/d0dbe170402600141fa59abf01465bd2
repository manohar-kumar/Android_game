import java.io.*;
import java.util.*;
import java.lang.*;

import javax.management.RuntimeErrorException;

public class Graph {
	private int V;
	private int E;
	private boolean[][] mat_a;
	private LinkedList<Integer>[] adj_a;
	private LinkedList<Integer>[] adj_b;
	private boolean[][] mat_b;
	private boolean[][] dangerous_a;
	private boolean[][] dangerous_b;
	
	public Graph(int V){
		if (V<0) throw new RuntimeException("Number of vertices must be non-negative");
		this.V=V;
		this.E=0;
		this.mat_a=new boolean[V][V];
		this.mat_b=new boolean[V][V];
		this.dangerous_a=new boolean[V][V];
		this.dangerous_b=new boolean[V][V];
		adj_a = (LinkedList<Integer>[]) new LinkedList[V];
		adj_b = (LinkedList<Integer>[]) new LinkedList[V];
		for (int v=0;v<V;v++){
			adj_a[v]=new LinkedList<Integer>();
			adj_a[v]=new LinkedList<Integer>();
			}
		}
	public void addEdge(int u,int v){
		if (u < 0 || v >= V) throw new IndexOutOfBoundsException();
        if (u < 0 || v >= V) throw new IndexOutOfBoundsException();
        if (!mat[u][v]){
        E++;
        adj[u].add(v);
        adj[v].add(u);
        mat[u][v]=true;
        mat[v][u]=true;
        }
       }
	public int V(){
		return V;
	}
	public int E(){
		return E;
		}
	public LinkedList<Integer> adj(int v) {
        if (v < 0 || v >= V) throw new IndexOutOfBoundsException();
        return adj[v];
    }

}